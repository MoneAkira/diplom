pipeline {
    parameters {
        choice choices: ['agent', 'master'], description: 'Select agent', name: 'agent'
    }
    agent {
        label "${agent}"
    }
    tools {
        maven '3.8.6'
    }
    stages {
        stage('Build') {
            steps {
                dir('Jenkins/simple_app_project/calculator') {
                    sh "mvn -B -DskipTests clean package"
                }
            }
        }
        stage('Test') {
         steps {
            dir('Jenkins/simple_app_project/calculator') {
                sh "mvn test"
                }
            }
        }
        stage('Notify') {
         steps {
               telegramSend(message: 'Result done', chatId: 915323020)                
            }
        }
    }     
    post {
            success { 
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : OK *Published* = YES'
        """)
        }
     }
        aborted {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Aborted` *Published* = `Aborted`'
        """)
        }
     
     }
        failure {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `not OK` *Published* = `no`'
        """)    
            }
        }
    }
}
